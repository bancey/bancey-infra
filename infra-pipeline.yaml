trigger:
  batch: true
  branches:
    include:
      - master
  paths:
    include:
      - terraform
      - pipelines/terraform-*.yaml
      - infra-pipeline.yaml

pr:
  - master

parameters:
  - name: environment_components
    type: object
    default:
      - deployment: dns
        environment: dns
        component: dns
        serviceConnection: "MSDN Sub"
        storageAccount: dns175090c1a7c944d1
        destroy: false
        deploy: true
        dependsOn: []
      - deployment: az_prod_gameserver
        environment: az-prod
        component: gameserver
        serviceConnection: "MSDN Sub"
        storageAccount: gamec96560353b1a4d1a
        destroy: false
        deploy: true
        dependsOn: []
      - deployment: k8s_infra
        environment: wanda
        component: k8s
        serviceConnection: "MSDN Sub"
        storageAccount: wanda1a85dd9018454b4
        destroy: false
        deploy: true
        local: true
        dependsOn:
          - CheckEnvIsOnline
      - deployment: migration
        environment: wanda
        component: migration
        serviceConnection: "MSDN Sub"
        storageAccount: wanda1a85dd9018454b4
        destroy: false
        deploy: true
        local: true
        dependsOn:
          - CheckEnvIsOnline
          - k8s_infra
      - deployment: pteronode
        environment: wanda
        component: pteronode
        serviceConnection: "MSDN Sub"
        storageAccount: wanda1a85dd9018454b4
        destroy: false
        deploy: true
        local: true
        dependsOn:
          - CheckEnvIsOnline
          - k8s_infra

variables:
  - name: agentImage
    value: ubuntu-20.04
  - name: terraformVersion
    value: 1.3.6

stages:
  - stage: CheckEnvIsOnline
    dependsOn: []
    jobs:
      - job: CheckEnvIsOnline
        pool:
          name: SelfHostedDocker
        steps:
          - script: |
              if nc -z 192.168.80.11 443 2>/dev/null; then
                echo "192.168.80.11 ✓"
              else
                echo "192.168.80.11 ✗"
              fi
  - ${{ each deployment in parameters.environment_components }}:
      - stage: ${{ deployment.deployment }}
        dependsOn: ${{ deployment.dependsOn }}
        jobs:
          - job: TerraformPlan
            condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
            pool:
              ${{ if eq(deployment.local, true) }}:
                name: SelfHostedDocker
              ${{ else }}:
                vmImage: $(agentImage)
            steps:
              - template: pipelines/terraform-init.yaml
                parameters:
                  terraformVersion: $(terraformVersion)
                  storageAccount: ${{ deployment.storageAccount}}
                  workingDirectory: $(System.DefaultWorkingDirectory)/terraform/components/${{ deployment.component }}
                  azureRmKey: ${{ deployment.deployment }}
                  ${{ if eq(deployment.local, true) }}:
                    downloadUrl: 'https://releases.hashicorp.com/terraform/$(terraformVersion)/terraform_$(terraformVersion)_linux_arm64.zip'
              - template: pipelines/terraform-plan.yaml
                parameters:
                  serviceConnection: ${{ deployment.serviceConnection }}
                  workingDirectory: $(System.DefaultWorkingDirectory)/terraform/components/${{ deployment.component }}
                  variableFilePath: $(System.DefaultWorkingDirectory)/terraform/environments/${{ deployment.environment }}/${{ deployment.environment }}.tfvars
          - job: TerraformApply
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
            pool:
              ${{ if eq(deployment.local, true) }}:
                name: SelfHostedDocker
              ${{ else }}:
                vmImage: $(agentImage)
            steps:
              - template: pipelines/terraform-init.yaml
                parameters:
                  terraformVersion: $(terraformVersion)
                  storageAccount: ${{ deployment.storageAccount}}
                  workingDirectory: $(System.DefaultWorkingDirectory)/terraform/components/${{ deployment.component }}
                  azureRmKey: ${{ deployment.deployment }}
                  ${{ if eq(deployment.local, true) }}:
                    downloadUrl: 'https://releases.hashicorp.com/terraform/$(terraformVersion)/terraform_$(terraformVersion)_linux_arm64.zip'
              - ${{ if eq(deployment.destroy, true) }}:
                  - template: pipelines/terraform-destroy.yaml
                    parameters:
                      serviceConnection: ${{ deployment.serviceConnection }}
                      workingDirectory: $(System.DefaultWorkingDirectory)/terraform/components/${{ deployment.component }}
                      variableFilePath: $(System.DefaultWorkingDirectory)/terraform/environments/${{ deployment.environment }}/${{ deployment.environment }}.tfvars
              - ${{ if eq(deployment.deploy, true) }}:
                  - template: pipelines/terraform-apply.yaml
                    parameters:
                      serviceConnection: ${{ deployment.serviceConnection }}
                      workingDirectory: $(System.DefaultWorkingDirectory)/terraform/components/${{ deployment.component }}
                      variableFilePath: $(System.DefaultWorkingDirectory)/terraform/environments/${{ deployment.environment }}/${{ deployment.environment }}.tfvars
                      ${{ if eq(deployment.local, true) }}:
                        parallelism: 2
